<%
  const layers = locals.layers;
  const helpers = locals.helpers;
-%>
// <%= helpers.autoGeneratedHeader.doNotModify %>
// <%= helpers.autoGeneratedHeader.generatedFrom(locals.filePath) %>

package com.trackasia.reactnative.components.styles;

import com.trackasia.android.style.layers.BackgroundLayer;
import com.trackasia.android.style.layers.CircleLayer;
import com.trackasia.android.style.layers.FillExtrusionLayer;
import com.trackasia.android.style.layers.FillLayer;
import com.trackasia.android.style.layers.LineLayer;
import com.trackasia.android.style.layers.PropertyFactory;
import com.trackasia.android.style.layers.RasterLayer;
import com.trackasia.android.style.layers.SymbolLayer;
import com.trackasia.android.style.layers.HeatmapLayer;
import com.trackasia.android.style.layers.HillshadeLayer;
import com.trackasia.android.style.layers.TransitionOptions;
import com.trackasia.android.style.light.Light;
import com.trackasia.android.style.light.Position;
import com.trackasia.reactnative.utils.DownloadMapImageTask;

import java.util.List;

public class MLRNStyleFactory {
    public static final String VALUE_KEY = "value";
    public static final String SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

  <%_ for (const layer of layers) { _%>
    public static void <%- helpers.setLayerMethodName(layer) -%>(final <%- helpers.getLayerType(layer, 'android') -%> layer, MLRNStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.isEmpty()) {
        return;
      }

      for (String styleKey : styleKeys) {
        final MLRNStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
          <%_ for (const prop of layer.properties) { _%>
            case "<%= prop.name %>":
              <%_ if (prop.image) { _%>
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      MLRNStyleFactory.set<%- helpers.pascalCase(prop.name) -%>(layer, styleValue);
                  }
              });
              <%_ } else { _%>
              MLRNStyleFactory.set<%- helpers.pascalCase(prop.name) -%>(layer, styleValue);
              <%_ } _%>
              break;
            <%_ if (prop.transition) { _%>
            case "<%= prop.name %>Transition":
              MLRNStyleFactory.set<%- helpers.pascalCase(prop.name) -%>Transition(layer, styleValue);
              break;
            <%_ } _%>
          <%_ } _%>
        }
      }
    }
  <%_ } _%>

  <%_ for (const layer of layers) { _%>
  <%_ for (const prop of layer.properties) { _%>
    public static void set<%- helpers.pascalCase(prop.name) -%>(<%- helpers.getLayerType(layer, 'android') -%> layer, MLRNStyleValue styleValue) {
      <%_ if (layer.name === 'light' && prop.name === 'position') { _%>
      Float[] values = styleValue.getFloatArray(VALUE_KEY);
      layer.set<%- helpers.pascalCase(prop.name) -%>(Position.fromPosition(values[0], values[1], values[2]));
      <%_ } else if (layer.name === 'light') { _%>
      layer.set<%- helpers.pascalCase(prop.name) -%>(<%- helpers.androidGetConfigType(helpers.androidInputType(prop.type, prop.value), prop) -%>);
      <%_ } else if (prop.name === 'visibility') { _%>
      layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
      <%_ } else if (prop.type === 'resolvedImage') { _%>
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.setProperties(PropertyFactory.<%= prop.name %>(styleValue.getImageStringValue()));
        } else {
          layer.setProperties(PropertyFactory.<%= prop.name %>(styleValue.getExpression()));
        }
      } else {
        layer.setProperties(PropertyFactory.<%= prop.name %>(<%- helpers.androidGetConfigType(helpers.androidInputType(prop.type, prop.value), prop) -%>));
      }
      <%_ } else { _%>
      if (styleValue.isExpression()) {
        layer.setProperties(PropertyFactory.<%= prop.name %>(styleValue.getExpression()));
      } else {
        layer.setProperties(PropertyFactory.<%= prop.name %>(<%- helpers.androidGetConfigType(helpers.androidInputType(prop.type, prop.value), prop) -%>));
      }
      <%_ } _%>
    }

    <%_ if (prop.transition) { %>
    public static void set<%- helpers.pascalCase(prop.name) -%>Transition(<%- helpers.getLayerType(layer, 'android') -%> layer, MLRNStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.set<%- helpers.pascalCase(prop.name) -%>Transition(transition);
      }
    }

    <%_ } _%>
  <%_ } _%>
  <%_ } _%>
}
